{"version":3,"sources":["components/Header.tsx","store/actions/mapActions.ts","components/non-client/CvMap.tsx","services/MapServices.ts","config.ts","components/modals/WorkplaceModal.tsx","store/actions/modalActions.ts","map-icons/workplace.svg","components/MapComponent.tsx","components/Timeline.tsx","components/Homepage.tsx","App.tsx","store/reducers/mapReducer.ts","store/reducers/modalReducer.ts","store/reducers/rootReducer.ts","store/store.ts","index.tsx"],"names":["Header","Navbar","bg","variant","Brand","as","Link","to","Nav","mapSizeHasChanged","hasChanged","type","payload","CvMap","targetDiv","map","defaultLayer","VectorLayer","source","VectorSource","setProperties","id","this","Map","controls","defaultControls","target","layers","TileLayer","OSM","view","View","center","fromLonLat","zoom","addLayer","on","e","dispatchEvent","CustomEvent","detail","getView","getZoom","location","latitude","toLonLat","getCenter","longitude","clickedFeatureId","getFeaturesAtPixel","pixel","getId","coordinate","featureId","lon","lat","SVG","layerId","getAllFeatures","some","feature","console","error","getAllVectorLayerIds","includes","newFeature","Feature","geometry","Point","setId","setStyle","__feature","resolution","Style","image","Icon","src","scale","Math","pow","getVectorLayer","getSource","addFeature","layer","allFeatures","getAllVectorLayers","getFeatures","Array","prototype","concat","apply","getProperties","getLayers","getArray","filter","find","forEach","removeSVG","removeLayer","layerWithFeature","removeFeature","getFeatureById","setView","zoomLevel","updateSize","getLocation","address","a","url","process","axios","get","replace","response","filtered","data","results","result","types","lng","longName","formatted_address","WorkplaceModal","useState","name","setName","setAddress","size","setSize","description","setDescription","addressHelper","setAddressHelper","apiresponse","setApiresponse","dispatch","useDispatch","handleSave","preventDefault","length","newWork","random","toString","log","handleUnFocus","value","Modal","show","animation","closeButton","onClick","Title","Body","Form","Row","className","Group","Col","controlId","Label","Control","onChange","onBlur","Text","muted","Button","MapComponent","setMap","mapRef","useRef","mapZoom","useSelector","state","mapLocation","mapSizeChanged","sizeChanged","showWorkModal","modal","showWorkplaceModal","mapWorkPlaces","workplaces","useEffect","setZoomLevel","setCenterView","current","addEventListener","setMapView","removeAllSVGs","workplace","addSVG","WorkplaceIcon","ref","Timeline","style","border","Homepage","Split","direction","onDrag","onDragEnd","App","exact","path","initialState","clickedCoords","undefined","showJobExpModal","rootReducer","combineReducers","action","work","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a428a923.chunk.js","sourcesContent":["/** React, Router */\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n/** Css, UI */\r\nimport { Nav } from 'react-bootstrap';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand as={Link} to=\"/\">\r\n        Epic home page\r\n      </Navbar.Brand>\r\n      <Nav.Link as={Link} to=\"/map\">\r\n        Map\r\n      </Nav.Link>\r\n      <Nav.Link as={Link} to=\"/timeline\">\r\n        Timeline\r\n      </Nav.Link>\r\n      <Nav.Link>Multi app page</Nav.Link>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import {\r\n  AddWorkPlaceType,\r\n  MapSizeHasChangedType,\r\n  SetMapClickCoordsType,\r\n  SetMapClickFeatureType,\r\n  SetMapViewType,\r\n  SetZoomType\r\n} from '../reducers/mapReducer';\r\nimport { Location, Workplace } from '../../types/types';\r\n\r\nexport const addWorkPlace = (work: Workplace): AddWorkPlaceType => {\r\n  return {\r\n    payload: work,\r\n    type: 'ADD_WORKPLACE'\r\n  };\r\n};\r\n\r\nexport const mapSizeHasChanged = (\r\n  hasChanged: boolean\r\n): MapSizeHasChangedType => {\r\n  return {\r\n    type: 'MAP_SIZE_CHANGED',\r\n    payload: hasChanged\r\n  };\r\n};\r\n\r\nexport const setMapClickedCoords = (\r\n  clickedLocation: Location\r\n): SetMapClickCoordsType => {\r\n  return {\r\n    payload: clickedLocation,\r\n    type: 'LAST_CLICKED_COORDS'\r\n  };\r\n};\r\n\r\nexport const setMapClickedFeature = (\r\n  clickedFeatureId: string\r\n): SetMapClickFeatureType => {\r\n  return {\r\n    payload: clickedFeatureId,\r\n    type: 'LAST_CLICKED_FEATURE_ID'\r\n  };\r\n};\r\n\r\nexport const setMapView = (\r\n  location: Location,\r\n  zoom: number\r\n): SetMapViewType => {\r\n  return {\r\n    payload: {\r\n      location,\r\n      zoom\r\n    },\r\n    type: 'SET_MAPVIEW'\r\n  };\r\n};\r\n\r\nexport const setMapZoom = (zoom: number): SetZoomType => {\r\n  return {\r\n    payload: zoom,\r\n    type: 'SET_ZOOM'\r\n  };\r\n};\r\n","/* eslint-disable no-console */\r\nimport { Map, MapBrowserEvent, MapEvent } from 'ol';\r\n\r\n/** OpenLayers */\r\nimport { Coordinate } from 'ol/coordinate';\r\nimport { defaults as defaultControls } from 'ol/control';\r\nimport { fromLonLat, toLonLat } from 'ol/proj';\r\nimport Feature, { FeatureLike } from 'ol/Feature';\r\nimport Icon from 'ol/style/Icon';\r\nimport OSM from 'ol/source/OSM';\r\nimport Style from 'ol/style/Style';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport Point from 'ol/geom/Point';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { View } from 'ol';\r\nexport default class CvMap {\r\n  readonly map: Map;\r\n\r\n  /**\r\n   * @param targetDiv Div where map is initialized\r\n   */\r\n  constructor(targetDiv: HTMLElement) {\r\n    const defaultLayer: VectorLayer = new VectorLayer({\r\n      source: new VectorSource()\r\n    });\r\n    defaultLayer.setProperties({\r\n      id: 'default'\r\n    });\r\n\r\n    this.map = new Map({\r\n      controls: defaultControls(),\r\n      target: targetDiv,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM()\r\n        })\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([21, 61]),\r\n        zoom: 10\r\n      })\r\n    });\r\n\r\n    this.map.addLayer(defaultLayer);\r\n\r\n    this.map.on('moveend', (e: MapEvent) => {\r\n      targetDiv.dispatchEvent(\r\n        new CustomEvent('viewchange', {\r\n          detail: {\r\n            zoom: e.map.getView().getZoom(),\r\n            location: {\r\n              latitude: toLonLat(e.map.getView().getCenter() as Coordinate)[1],\r\n              longitude: toLonLat(e.map.getView().getCenter() as Coordinate)[0]\r\n            }\r\n          }\r\n        })\r\n      );\r\n    });\r\n\r\n    this.map.on('click', (e: MapBrowserEvent) => {\r\n      const clickedFeatureId: string | undefined = e.map\r\n        ?.getFeaturesAtPixel(e.pixel)[0]\r\n        ?.getId() as string;\r\n\r\n      targetDiv.dispatchEvent(\r\n        new CustomEvent('click-map', {\r\n          detail: {\r\n            location: toLonLat(e.coordinate),\r\n            featureId: clickedFeatureId\r\n          }\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add SVG (feature) to layer\r\n   * @param lon Longitude\r\n   * @param lat Latitude\r\n   * @param featureId id of feature\r\n   * @param SVG SVG string\r\n   * @param layerId Layer where SVG is added\r\n   */\r\n  addSVG(\r\n    lon: number,\r\n    lat: number,\r\n    featureId: string,\r\n    SVG: string,\r\n    layerId: string\r\n  ): void {\r\n    const mapContainsFeature: boolean = this.getAllFeatures().some(\r\n      (feature: Feature) => feature.getId() === featureId\r\n    );\r\n\r\n    if (mapContainsFeature) {\r\n      console.error(`Already added feature: ${featureId}`);\r\n      return;\r\n    }\r\n\r\n    if (!this.getAllVectorLayerIds().includes(layerId)) {\r\n      console.error(`No layer: ${layerId}`);\r\n      return;\r\n    }\r\n\r\n    const newFeature: Feature = new Feature({\r\n      geometry: new Point(fromLonLat([lon, lat]))\r\n    });\r\n    newFeature.setId(featureId);\r\n\r\n    newFeature.setStyle((__feature: FeatureLike, resolution: number): Style => {\r\n      resolution = resolution > 50 ? 50 : resolution;\r\n      resolution = resolution < 0.25 ? 0.25 : resolution;\r\n\r\n      return new Style({\r\n        image: new Icon({\r\n          src: SVG,\r\n          scale: Math.pow(resolution / 5, -(1 / 4))\r\n        })\r\n      });\r\n    });\r\n\r\n    this.getVectorLayer(layerId).getSource().addFeature(newFeature);\r\n  }\r\n\r\n  /**\r\n   * Add vector layer on map\r\n   * @param id id of added layer\r\n   */\r\n  addVectorLayer(id: string): void {\r\n    if (this.getAllVectorLayerIds().includes(id)) {\r\n      console.error(`Already added layer: ${id}`);\r\n      return;\r\n    }\r\n\r\n    const layer: VectorLayer = new VectorLayer({\r\n      source: new VectorSource()\r\n    });\r\n    layer.setProperties({ id });\r\n\r\n    this.map.addLayer(layer);\r\n  }\r\n\r\n  /**\r\n   * Get all features from map\r\n   * @returns Feature array\r\n   */\r\n  private getAllFeatures(): Feature[] {\r\n    const allFeatures: Feature[][] = this.getAllVectorLayers().map(\r\n      (layer: VectorLayer) => layer.getSource().getFeatures()\r\n    );\r\n    /** Return Feature[][] as Feature[] */\r\n    return Array.prototype.concat.apply([], allFeatures);\r\n  }\r\n\r\n  /**\r\n   * Get all layer ids from map\r\n   * @returns String array\r\n   */\r\n  private getAllVectorLayerIds(): string[] {\r\n    return this.getAllVectorLayers().map(\r\n      (layer: VectorLayer) => layer.getProperties().id\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return all vector layers from map\r\n   * @returns Vector layer array\r\n   */\r\n  private getAllVectorLayers(): VectorLayer[] {\r\n    return this.map\r\n      .getLayers()\r\n      .getArray()\r\n      .filter((layer) => layer instanceof VectorLayer) as VectorLayer[];\r\n  }\r\n\r\n  /**\r\n   * Get vector layer by id\r\n   * @param id of wanter layer\r\n   * @returns Vector layer\r\n   */\r\n  private getVectorLayer(id: string): VectorLayer {\r\n    return this.getAllVectorLayers().find(\r\n      (layer: VectorLayer) => layer.getProperties().id === id\r\n    ) as VectorLayer;\r\n  }\r\n  /**\r\n   * Removes all SVGs (map features) from map\r\n   */\r\n  removeAllSVGs(): void {\r\n    this.getAllFeatures().forEach((feature: Feature) =>\r\n      this.removeSVG(feature.getId() as string)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Removes layer from map. All layer's features will be removed\r\n   * @param id id of layer to remove\r\n   */\r\n  removeLayer(id: string): void {\r\n    if (!this.getAllVectorLayerIds().includes(id)) {\r\n      console.error(`No layer on map: ${id}`);\r\n      return;\r\n    }\r\n    this.map.removeLayer(this.getVectorLayer(id));\r\n  }\r\n\r\n  /**\r\n   * Remove SVG icon from map\r\n   * @param id id of feature\r\n   */\r\n  removeSVG(id: string): void {\r\n    const layerWithFeature: VectorLayer = this.getAllVectorLayers().find(\r\n      (layer: VectorLayer) =>\r\n        layer\r\n          .getSource()\r\n          .getFeatures()\r\n          .some((feature: Feature) => feature.getId() === id)\r\n    ) as VectorLayer;\r\n\r\n    layerWithFeature\r\n      .getSource()\r\n      .removeFeature(layerWithFeature.getSource().getFeatureById(id));\r\n  }\r\n\r\n  /**\r\n   * Center map on coordinates. Doesn't change zoom level.\r\n   * @param lon Longitude\r\n   * @param lat Latitude\r\n   */\r\n  setCenterView(lon: number, lat: number): void {\r\n    this.map.setView(\r\n      new View({\r\n        center: fromLonLat([lon, lat]),\r\n        zoom: this.map.getView().getZoom()\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set zoom level on view. 0 the most far out. Doesn't change center view\r\n   * @param zoomLevel\r\n   */\r\n  setZoomLevel(zoomLevel: number): void {\r\n    this.map.setView(\r\n      new View({\r\n        zoom: zoomLevel,\r\n        center: this.map.getView().getCenter()\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Force a recalculation of the map viewport size.\r\n   * This should be called when third-party code changes the size of the map viewport.\r\n   */\r\n  updateSize(): void {\r\n    this.map.updateSize();\r\n  }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\r\nimport axios from 'axios';\r\nimport { GeocodeResult } from './Types';\r\n\r\nimport { GEO_APIKEY } from '../config';\r\n\r\nexport const getLocation = async (\r\n  address: string\r\n): Promise<GeocodeResult[]> => {\r\n  const url = `https://maps.googleapis.com/maps/api/geocode/json?address=[ADDRESS]&components=country:FI&key=${GEO_APIKEY}`;\r\n  const response: any = await axios.get(url.replace('[ADDRESS]', address));\r\n\r\n  const filtered: any[] = response?.data?.results.filter((result: any) =>\r\n    result.types.includes('street_address')\r\n  );\r\n\r\n  return filtered.map((result: any) => {\r\n    const { lat, lng } = result?.geometry?.location;\r\n    return {\r\n      location: {\r\n        latitude: lat,\r\n        longitude: lng\r\n      },\r\n      longName: result.formatted_address\r\n    };\r\n  });\r\n};\r\n","// eslint-disable-next-line @typescript-eslint/no-var-requires\r\n\r\nexport const GEO_APIKEY: string = process.env\r\n  .REACT_APP_GEOCODE_APIKEY as string;\r\n","/** React, Redux */\r\nimport React, { FocusEvent, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n/** API */\r\nimport { getLocation } from '../../services/MapServices';\r\n\r\n/** Actions */\r\nimport { addWorkPlace } from '../../store/actions/mapActions';\r\nimport { toggleWorkModal } from '../../store/actions/modalActions';\r\n\r\n/** Types */\r\nimport { GeocodeResult } from '../../services/Types';\r\nimport { Workplace } from '../../types/types';\r\n\r\n/** Css, UI */\r\nimport { Button, Col, Form, Modal, Row } from 'react-bootstrap';\r\n\r\nconst WorkplaceModal: React.FC = () => {\r\n  const [name, setName] = useState<string>('');\r\n  const [address, setAddress] = useState<string>('');\r\n  const [size, setSize] = useState<string>('tiny');\r\n  const [description, setDescription] = useState<string>('');\r\n  const [addressHelper, setAddressHelper] = useState<string>('');\r\n  const [apiresponse, setApiresponse] = useState<GeocodeResult | null>(null);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSave = async (e: React.MouseEvent<HTMLElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n\r\n    if (!apiresponse || !name.length) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const newWork: Workplace = {\r\n        location: {\r\n          latitude: apiresponse.location?.latitude as number,\r\n          longitude: apiresponse.location?.longitude as number\r\n        },\r\n        name,\r\n        description,\r\n        size,\r\n        id: (Math.random() * (10000000 - 3) + 3).toString()\r\n      };\r\n\r\n      dispatch(addWorkPlace(newWork));\r\n      dispatch(toggleWorkModal());\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const handleUnFocus = async (\r\n    e: FocusEvent<HTMLInputElement>\r\n  ): Promise<void> => {\r\n    if (e.target.value.length < 4) {\r\n      setAddressHelper('Minimum 4 characters');\r\n      return;\r\n    }\r\n    setAddressHelper('');\r\n    const response: GeocodeResult[] = await getLocation(e.target.value);\r\n\r\n    if (!response.length) {\r\n      setAddressHelper('No street address');\r\n      setApiresponse(null);\r\n    } else if (response.length === 1) {\r\n      setAddress(response[0].longName as string);\r\n      setApiresponse(response[0]);\r\n    } else {\r\n      setAddressHelper('Too many results');\r\n      setApiresponse(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal show animation={false}>\r\n      <Modal.Header closeButton onClick={() => dispatch(toggleWorkModal())}>\r\n        <Modal.Title>New workplace</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Row className=\"mb-3\">\r\n            <Form.Group as={Col} controlId=\"formName\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                type=\"name\"\r\n                onChange={(e) => setName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n\r\n            <Form.Group as={Col} controlId=\"formEmployees\">\r\n              <Form.Label>Employees</Form.Label>\r\n              <Form.Control\r\n                as={'select'}\r\n                onChange={(e) => setSize(e.target.value)}\r\n              >\r\n                <option value=\"tiny\">under 5</option>\r\n                <option value=\"small\">6 - 25</option>\r\n                <option value=\"medium-minus\">26 - 100</option>\r\n                <option value=\"medium\">101 - 300</option>\r\n                <option value=\"medium-plus\">301 - 1000</option>\r\n                <option value=\"large\">1001 - 3000</option>\r\n                <option value=\"very large\">over 3000</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Row>\r\n\r\n          <Form.Group className=\"mb-3\" controlId=\"formGridAddress1\">\r\n            <Form.Label>Address</Form.Label>\r\n            <Form.Control\r\n              value={address}\r\n              onChange={(e) => setAddress(e.target.value)}\r\n              onBlur={handleUnFocus}\r\n            />\r\n            <Form.Text muted>{addressHelper}</Form.Text>\r\n          </Form.Group>\r\n\r\n          <Form.Group className=\"mb-3\" controlId=\"formGridAddress2\">\r\n            <Form.Label>Description</Form.Label>\r\n            <Form.Control\r\n              as={'textarea'}\r\n              onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n\r\n          <Button onClick={handleSave} variant=\"primary\" type=\"submit\">\r\n            Save\r\n          </Button>\r\n        </Form>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default WorkplaceModal;\r\n","import {\r\n  ToggleJobModalType,\r\n  ToggleWorkModalType\r\n} from '../reducers/modalReducer';\r\n\r\nexport const toggleJobModal = (): ToggleJobModalType => {\r\n  return {\r\n    type: 'TOGGLE_JOB_MODAL'\r\n  };\r\n};\r\n\r\nexport const toggleWorkModal = (): ToggleWorkModalType => {\r\n  return {\r\n    type: 'TOGGLE_WORK_MODAL'\r\n  };\r\n};\r\n","export default __webpack_public_path__ + \"static/media/workplace.644bf0a4.svg\";","/** React, Redux */\r\nimport React from 'react';\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n/** Reducer, actions */\r\nimport { RootState } from '../store/reducers/rootReducer';\r\nimport {\r\n  setMapClickedCoords,\r\n  setMapClickedFeature,\r\n  setMapView\r\n} from '../store/actions/mapActions';\r\nimport { toggleWorkModal } from '../store/actions/modalActions';\r\n\r\n/** Types */\r\nimport { Location, Workplace } from '../types/types';\r\n\r\n/** Components */\r\nimport { Button } from 'react-bootstrap';\r\nimport CvMap from './non-client/CvMap';\r\nimport WorkplaceModal from './modals/WorkplaceModal';\r\n\r\n/** Css, Icons, UI */\r\nimport WorkplaceIcon from '../map-icons/workplace.svg';\r\nimport 'ol/ol.css';\r\nimport '../styles/MapComponent.css';\r\n\r\nconst MapComponent: React.FC = () => {\r\n  const [map, setMap] = useState<CvMap>();\r\n  const mapRef = useRef<HTMLDivElement>(null);\r\n  const dispatch = useDispatch();\r\n\r\n  /** Redux states */\r\n  const mapZoom: number = useSelector((state: RootState) => state.map.zoom);\r\n  const mapLocation: Location = useSelector(\r\n    (state: RootState) => state.map.location\r\n  );\r\n  const mapSizeChanged: boolean = useSelector(\r\n    (state: RootState) => state.map.sizeChanged\r\n  );\r\n  const showWorkModal: boolean = useSelector(\r\n    (state: RootState) => state.modal.showWorkplaceModal\r\n  );\r\n  const mapWorkPlaces: Workplace[] = useSelector(\r\n    (state: RootState) => state.map.workplaces\r\n  );\r\n\r\n  /** Update map from Redux && Split view change */\r\n  useEffect(() => {\r\n    map?.setZoomLevel(mapZoom);\r\n    map?.setCenterView(mapLocation.longitude, mapLocation.latitude);\r\n    mapSizeChanged && map?.updateSize();\r\n  }, [map, mapLocation, mapSizeChanged, mapZoom]);\r\n\r\n  /** Init map */\r\n  useEffect(() => {\r\n    /** init coords and zoom is set in mapReducer's initial state */\r\n    setMap(new CvMap(mapRef.current as HTMLElement));\r\n\r\n    /** Update map's coordinates & view on redux */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    mapRef.current?.addEventListener('viewchange', (e: any) => {\r\n      const { location, zoom } = e.detail;\r\n      dispatch(setMapView(location, zoom));\r\n    });\r\n\r\n    /** Get coordinates & selected feature from map click */\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    mapRef.current?.addEventListener('click-map', (e: any) => {\r\n      dispatch(setMapClickedCoords(e.detail.location));\r\n      dispatch(setMapClickedFeature(e.detail.featureId));\r\n    });\r\n  }, [dispatch]);\r\n\r\n  /** Update icons on change */\r\n  useEffect(() => {\r\n    map?.removeAllSVGs();\r\n    mapWorkPlaces.forEach((workplace: Workplace) => {\r\n      const { latitude, longitude } = workplace.location;\r\n      map?.addSVG(\r\n        longitude,\r\n        latitude,\r\n        workplace.id as string,\r\n        WorkplaceIcon,\r\n        'default'\r\n      );\r\n    });\r\n  }, [mapWorkPlaces, map]);\r\n\r\n  const toggleModal = (): void => {\r\n    dispatch(toggleWorkModal());\r\n  };\r\n\r\n  return (\r\n    <div id=\"map-container\">\r\n      <div className=\"tool-bar\">\r\n        <Button variant=\"primary\" onClick={toggleModal}>\r\n          Add Place\r\n        </Button>\r\n      </div>\r\n      <div id=\"map\" ref={mapRef} />\r\n      {showWorkModal && <WorkplaceModal />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n","/** React */\r\nimport React from 'react';\r\n\r\nconst Timeline: React.FC = () => {\r\n  return (\r\n    <div style={{ border: '1px solid' }}>\r\n      <h1>Timeline coming....</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timeline;\r\n","/** React, Redux */\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\n/** Reducers, actions */\r\nimport { mapSizeHasChanged } from '../store/actions/mapActions';\r\n\r\n/** Components */\r\nimport MapComponent from './MapComponent';\r\nimport Split from 'split.js';\r\nimport Timeline from './Timeline';\r\n\r\n/** Css */\r\nimport '../styles/Homepage.css';\r\n\r\nconst Homepage: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    Split(['#split-row-top', '#split-row-bottom'], {\r\n      direction: 'vertical',\r\n      onDrag: () => dispatch(mapSizeHasChanged(true)),\r\n      onDragEnd: () => dispatch(mapSizeHasChanged(true))\r\n    });\r\n    Split(['#split-col-left', '#split-col-right'], {\r\n      direction: 'horizontal'\r\n    });\r\n\r\n    /** Map may be initialized before split when it's size is wrong */\r\n    dispatch(mapSizeHasChanged(true));\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"home-page\">\r\n      <div className=\"main-split\">\r\n        <div id=\"split-row-top\">\r\n          <MapComponent />\r\n        </div>\r\n        <div id=\"split-row-bottom\">\r\n          <div className=\"split-nested\">\r\n            <div id=\"split-col-left\">\r\n              <div style={{ border: '1px solid' }}>\r\n                Tähän tulee viewer <br /> asd\r\n              </div>\r\n            </div>\r\n            <div id=\"split-col-right\">\r\n              <Timeline />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Homepage;\r\n","/** React, Router */\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\n/** Components */\r\nimport Header from './components/Header';\r\nimport Homepage from './components/Homepage';\r\nimport MapComponent from './components/MapComponent';\r\nimport Timeline from './components/Timeline';\r\n\r\n/** Css */\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div id=\"App\">\r\n      <Router>\r\n        <div className=\"header\">\r\n          <Header />\r\n        </div>\r\n        <div className=\"content\">\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Homepage />\r\n            </Route>\r\n            <Route path=\"/map\">\r\n              <MapComponent />\r\n            </Route>\r\n            <Route path=\"/timeline\">\r\n              <Timeline />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { Location, Workplace, MapView } from '../../types/types';\r\n\r\nexport interface MapState {\r\n  clickedCoords: Location;\r\n  clickedFeatureId?: string;\r\n  location: Location;\r\n  sizeChanged: boolean;\r\n  workplaces: Workplace[];\r\n  zoom: number;\r\n}\r\n\r\nconst initialState: MapState = {\r\n  clickedCoords: { latitude: 0, longitude: 0 },\r\n  clickedFeatureId: undefined,\r\n  sizeChanged: false,\r\n  location: { latitude: 61.48, longitude: 23.79 },\r\n  workplaces: [\r\n    {\r\n      location: {latitude: 61.5, longitude: 23.79},\r\n      name: 'asd',\r\n      id: 'asd',\r\n    },\r\n    {\r\n      location: {latitude: 61.4, longitude: 23.5},\r\n      name: 'ad',\r\n      id: 'ad',\r\n    }\r\n  ],\r\n  zoom: 13\r\n};\r\n\r\nexport type AddWorkPlaceType = { type: 'ADD_WORKPLACE'; payload: Workplace };\r\nexport type MapSizeHasChangedType = {\r\n  type: 'MAP_SIZE_CHANGED';\r\n  payload: boolean;\r\n};\r\nexport type RemoveWorkPlaceType = {\r\n  type: 'REMOVE_WORKPLACE';\r\n  payload: Workplace;\r\n};\r\nexport type SetMapClickCoordsType = {\r\n  type: 'LAST_CLICKED_COORDS';\r\n  payload: Location;\r\n};\r\nexport type SetMapClickFeatureType = {\r\n  type: 'LAST_CLICKED_FEATURE_ID';\r\n  payload: string;\r\n};\r\nexport type SetMapViewType = { type: 'SET_MAPVIEW'; payload: MapView };\r\nexport type SetMapLocationType = { type: 'SET_LOCATION'; payload: Location };\r\nexport type SetWorkPlaceType = {\r\n  type: 'SET_WORKPLACES';\r\n  payload: Workplace[];\r\n};\r\nexport type SetZoomType = { type: 'SET_ZOOM'; payload: number };\r\n\r\nexport type MapActions =\r\n  | AddWorkPlaceType\r\n  | MapSizeHasChangedType\r\n  | RemoveWorkPlaceType\r\n  | SetMapClickCoordsType\r\n  | SetMapClickFeatureType\r\n  | SetMapViewType\r\n  | SetMapLocationType\r\n  | SetWorkPlaceType\r\n  | SetZoomType;\r\n\r\nexport const mapReducer = (\r\n  state: MapState = initialState,\r\n  action: MapActions\r\n): MapState => {\r\n  switch (action.type) {\r\n    case 'ADD_WORKPLACE':\r\n      return { ...state, workplaces: state.workplaces.concat(action.payload) };\r\n\r\n    case 'MAP_SIZE_CHANGED':\r\n      return { ...state, sizeChanged: !state.sizeChanged };\r\n\r\n    case 'REMOVE_WORKPLACE':\r\n      return {\r\n        ...state,\r\n        workplaces: state.workplaces.filter(\r\n          (work: Workplace) => action.payload !== work\r\n        )\r\n      };\r\n\r\n    case 'LAST_CLICKED_COORDS':\r\n      return {\r\n        ...state,\r\n        clickedCoords: action.payload\r\n      };\r\n\r\n    case 'LAST_CLICKED_FEATURE_ID':\r\n      return {\r\n        ...state,\r\n        clickedFeatureId: action.payload\r\n      };\r\n\r\n    case 'SET_LOCATION':\r\n      return {\r\n        ...state,\r\n        location: action.payload\r\n      };\r\n\r\n    case 'SET_MAPVIEW':\r\n      return {\r\n        ...state,\r\n        location: action.payload.location,\r\n        zoom: action.payload.zoom\r\n      };\r\n\r\n    case 'SET_WORKPLACES':\r\n      return { ...state, workplaces: action.payload };\r\n\r\n    case 'SET_ZOOM':\r\n      return { ...state, zoom: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","export interface ModalState {\r\n  showWorkplaceModal: boolean;\r\n  showJobExpModal: boolean;\r\n}\r\n\r\nconst initialState: ModalState = {\r\n  showJobExpModal: false,\r\n  showWorkplaceModal: false\r\n};\r\n\r\nexport type ToggleJobModalType = { type: 'TOGGLE_JOB_MODAL' };\r\nexport type ToggleWorkModalType = { type: 'TOGGLE_WORK_MODAL' };\r\n\r\nexport type ModalActions = ToggleJobModalType | ToggleWorkModalType;\r\n\r\nexport const modalReducer = (\r\n  state: ModalState = initialState,\r\n  action: ModalActions\r\n): ModalState => {\r\n  switch (action.type) {\r\n    case 'TOGGLE_JOB_MODAL':\r\n      return {\r\n        ...state,\r\n        showJobExpModal: !state.showJobExpModal,\r\n        showWorkplaceModal: false\r\n      };\r\n\r\n    case 'TOGGLE_WORK_MODAL':\r\n      return {\r\n        ...state,\r\n        showWorkplaceModal: !state.showWorkplaceModal,\r\n        showJobExpModal: false\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\nimport { mapReducer } from './mapReducer';\r\nimport { modalReducer } from './modalReducer';\r\n\r\nexport const rootReducer = combineReducers({\r\n  map: mapReducer,\r\n  modal: modalReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { createStore } from 'redux';\r\nimport { rootReducer } from './reducers/rootReducer';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport { Provider } from 'react-redux';\r\n\r\nimport store from './store/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}